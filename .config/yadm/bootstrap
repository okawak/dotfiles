#!/bin/bash

set -eu

# Set XDG directories.
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_DATA_HOME="${HOME}/.local/share"

# output format
# shellcheck disable=SC2034
bold="$(tput bold 2>/dev/null || printf '')"
# shellcheck disable=SC2034
gray="$(tput setaf 0 2>/dev/null || printf '')"
# shellcheck disable=SC2034
underline="$(tput smul 2>/dev/null || printf '')"
# shellcheck disable=SC2034
red="$(tput setaf 1 2>/dev/null || printf '')"
# shellcheck disable=SC2034
green="$(tput setaf 2 2>/dev/null || printf '')"
# shellcheck disable=SC2034
yellow="$(tput setaf 3 2>/dev/null || printf '')"
# shellcheck disable=SC2034
blue="$(tput setaf 4 2>/dev/null || printf '')"
# shellcheck disable=SC2034
magenta="$(tput setaf 5 2>/dev/null || printf '')"
# shellcheck disable=SC2034
no_format="$(tput sgr0 2>/dev/null || printf '')"

# main structure
main() {
    need_cmd uname

    printf "\n"
    initialize_for_each_ostype || return 1
    local _ostype="$RETVAL"
}

initialize_for_each_ostype() {
    local _ostype
    _ostype="$(uname -s)"

    case "$_ostype" in
    Linux)
        if [ -f "/etc/os-release" ]; then
            # shellcheck disable=SC1091
            source "/etc/os-release"
            case "$NAME" in
            *Alma*)
                rpm_install
                _ostype=AlmaLinux
                ;;
            *Amazon*)
                rpm_install
                _ostype=AmazonLinux
                ;;
            *Arch*)
                _ostype=ArchLinux
                warn "currently not support for $_ostype"
                exit 1
                ;;
            *Debian*)
                deb_install
                _ostype=Debian
                ;;
            *Manjaro*)
                _ostype=ManjaroLinux
                warn "currently not support for $_ostype"
                exit 1
                ;;
            *Raspbian*)
                deb_install
                _ostype=Raspbian
                ;;
            *Rocky*)
                rpm_install
                _ostype=RockyLinux
                ;;
            *Ubuntu*)
                deb_install
                _ostype=Ubuntu
                ;;
            *)
                err "Unexpected Linux distribution: $_ostype"
                ;;
            esac
        else
            err "could not find /etc/os-release file..."
        fi
        ;;
    Darwin)
        brew_install
        _ostype=MacOS
        ;;
    windows32)
        # windows OS don't support zsh shell? (not WSL2)
        _ostype=Windows
        err "Currently not support $_ostype"
        ;;
    *)
        err "unrecognized OS type: $_ostype"
        ;;
    esac

    RETVAL="$_ostype"
}

rpm_install() {
    need_cmd dnf

    if check_cmd starship; then
        info "we have starship! skip the install..."
    else
        local _answer
        while true; do
            read -rp "install starship now? (y/n): " _answer
            case ${_answer} in
            y)
                sudo dnf update
                sudo dnf copr enable atim/starship
                sudo dnf install starship
                break
                ;;
            n)
                info "skip to install startship..."
                info "you can install it by:"
                blue_msg "sudo dnf copr enable atim/starship"
                blue_msg "sudo dnf install starship"
                break
                ;;
            esac
        done
    fi

    if check_cmd zsh; then
        info "we have zsh! skip the install..."
    else
        local _answer
        while true; do
            read -rp "install zsh now? (y/n): " _answer
            case ${_answer} in
            y)
                sudo dnf install zsh
                break
                ;;
            n)
                info "skip to install zsh..."
                info "you can install it by"
                blue_msg "sudo dnf install zsh"
                break
                ;;
            esac
        done
    fi

    if check_cmd zsh && [ "${SHELL##*/}" = "zsh" ]; then
        info "defalut shell is zsh! skip the setting..."
    else
        local _answer
        while true; do
            read -rp "change default shell to zsh now? (y/n) " _answer
            case ${_answer} in
            y)
                if check_cmd chsh; then
                    chsh -s /bin/zsh
                else
                    sudo dnf install util-linux-user
                    chsh -s /bin/zsh
                fi
                break
                ;;
            n)
                info "skip to change default shell to zsh"
                info "you can change it by"
                blue_msg "chsh -s /bin/zsh"
                break
                ;;
            esac
        done
    fi

    printf "\n"
    info "Install the important command, git, tmux, vim..."
    if check_cmd git; then
        info "we have git! skip the install..."
    else
        sudo dnf install git
    fi

    if check_cmd tmux; then
        info "we have tmux! skip the install..."
    else
        sudo dnf install tmux
    fi

    if check_cmd vim; then
        info "we have vim! skip the install..."
    else
        sudo dnf install vim
    fi
}

deb_install() {
    need_cmd apt
    need_cmd curl

    if check_cmd starship; then
        info "we have starship! skip the install..."
    else
        local _answer
        warn "currently apt package manager does not support starship"
        while true; do
            read -rp "install now from the source? (y/n): " _answer
            case ${_answer} in
            y)
                curl -sS https://starship.rs/install.sh | sh
                break
                ;;
            n)
                info "skip to install startship..."
                info "you can install it by:"
                blue_msg "curl -sS https://starship.rs/install.sh | sh"
                break
                ;;
            esac
        done
    fi

    if check_cmd zsh; then
        info "we have zsh! skip the install..."
    else
        local _answer
        while true; do
            read -rp "install zsh now? (y/n): " _answer
            case ${_answer} in
            y)
                sudo apt install zsh
                break
                ;;
            n)
                info "skip to install zsh..."
                info "you can install it by"
                blue_msg "sudo apt install zsh"
                break
                ;;
            esac
        done
    fi

    if check_cmd zsh && [ "${SHELL##*/}" = "zsh" ]; then
        info "defalut shell is zsh! skip the setting..."
    else
        local _answer
        while true; do
            read -rp "change default shell to zsh now? (y/n) " _answer
            case ${_answer} in
            y)
                need_cmd chsh
                chsh -s /bin/zsh
                break
                ;;
            n)
                info "skip to change default shell to zsh"
                info "you can change it by"
                blue_msg "chsh -s /bin/zsh"
                break
                ;;
            esac
        done
    fi

    printf "\n"
    info "Install the important command, git, tmux, vim..."
    if check_cmd git; then
        info "we have git! skip the install..."
    else
        sudo apt install git
    fi

    if check_cmd tmux; then
        info "we have tmux! skip the install..."
    else
        sudo apt install tmux
    fi

    if check_cmd vim; then
        info "we have vim! skip the install..."
    else
        sudo apt install vim
    fi
}

brew_install() {
    need_cmd brew
    need_cmd zsh # default shell of macOS is zsh

    if check_cmd starship; then
        info "we have starship! skip the install..."
    else
        local _answer
        while true; do
            read -rp "install starship now? (y/n): " _answer
            case ${_answer} in
            y)
                brew update
                brew install starship
                break
                ;;
            n)
                info "skip to install startship..."
                info "you can install it by:"
                blue_msg "brew install starship"
                break
                ;;
            esac
        done
    fi

    if [ "${SHELL##*/}" = "zsh" ]; then
        info "defalut shell is zsh! skip the setting..."
    else
        local _answer
        warn "it will change the default shell to /bin/zsh. if you want to use zsh from homebrew, you need to skip it"
        while true; do
            read -rp "change default shell to zsh now? (y/n) " _answer
            case ${_answer} in
            y)
                need_cmd chsh
                chsh -s /bin/zsh
                break
                ;;
            n)
                info "skip to change default shell to zsh"
                info "you can change it by"
                blue_msg "chsh -s /bin/zsh"
                break
                ;;
            esac
        done
    fi

    printf "\n"
    info "Install the important command, git, tmux, vim..."
    if check_cmd git; then
        info "we have git! skip the install..."
    else
        brew install git
    fi

    if check_cmd tmux; then
        info "we have tmux! skip the install..."
    else
        brew install tmux
    fi

    if check_cmd vim; then
        info "we have vim! skip the install..."
    else
        brew install vim
    fi
}

# useful function
info() {
    printf '%s\n' "${bold}info:${no_format} $*"
}

warn() {
    printf '%s\n' "${yellow}warning: $*${no_format}"
}

err() {
    printf '%s\n' "${red}error: $*${no_format}" >&2
    exit 1
}

blue_msg() {
    printf '%s\n' "${blue}$*${no_format}"
}

need_cmd() {
    if ! check_cmd "$1"; then
        err "need '$1' (command not found)"
    fi
}

check_cmd() {
    command -v "$1" >/dev/null 2>&1
}

# execute part
main "$@" || exit 1
