#!/bin/bash

set -eu

########################################
# Verify ZDOTDIR environment variable
########################################
if [ -z "${ZDOTDIR:-}" ]; then
    printf "error: ZDOTDIR is not defined. Please set it before running this script.\n" >&2
    exit 1
fi

########################################
# Environment Setup
########################################
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_STATE_HOME="${HOME}/.local/state"
export VIMINIT=":source ${XDG_CONFIG_HOME}/vim/vimrc"

########################################
# Color and Formatting Setup
########################################
init_colors() {
    if ! command -v tput >/dev/null 2>&1; then
        printf "error: 'tput' command not found, cannot set colors.\n"
        exit 1
    fi

    # Use shellcheck disable since some vars may not be used directly.
    # shellcheck disable=SC2034
    bold="$(tput bold 2>/dev/null || printf '')"
    # shellcheck disable=SC2034
    underline="$(tput smul 2>/dev/null || printf '')"
    # shellcheck disable=SC2034
    red="$(tput setaf 1 2>/dev/null || printf '')"
    # shellcheck disable=SC2034
    green="$(tput setaf 2 2>/dev/null || printf '')"
    # shellcheck disable=SC2034
    yellow="$(tput setaf 3 2>/dev/null || printf '')"
    # shellcheck disable=SC2034
    blue="$(tput setaf 4 2>/dev/null || printf '')"
    # shellcheck disable=SC2034
    magenta="$(tput setaf 5 2>/dev/null || printf '')"
    # shellcheck disable=SC2034
    gray="$(tput setaf 0 2>/dev/null || printf '')"
    # shellcheck disable=SC2034
    no_format="$(tput sgr0 2>/dev/null || printf '')"
}

########################################
# Utility Functions
########################################

# Print info message
info() {
    printf '%s\n' "${bold}info:${no_format} $*"
}

# Print warning message
warn() {
    printf '%s\n' "${yellow}warning:${no_format} $*" >&2
}

# Print error message and exit
err() {
    printf '%s\n' "${red}error:${no_format} $*" >&2
    exit 1
}

# Check if command exists, else fail
need_cmd() {
    if ! command -v "$1" >/dev/null 2>&1; then
        err "need '$1' (command not found)"
    fi
}

# Backup a file to a destination directory with "_old" suffix
# Arguments:
#   1: Source file path
#   2: Destination directory path
#   3: Destination base name (without dot)
backup_file() {
    local src_file="$1"
    local dest_dir="$2"
    local dest_base_name="$3"

    mkdir -p "$dest_dir"
    if [ -e "$src_file" ]; then
        mv "$src_file" "${dest_dir}/${dest_base_name}_old"
    fi
}

########################################
# Setup Functions
########################################

# Move and backup Zsh dotfiles, remove leading dot and add "_old" suffix
# Also create symlinks from zshrc -> .zshrc
setup_zsh_config() {
    info "Setting up Zsh configuration..."
    local ZSH_DOTFILES=(".zlogin" ".zlogout" ".zprofile" ".zshenv" ".zshrc" ".zimrc")

    mkdir -p "${ZDOTDIR}"

    for file in "${ZSH_DOTFILES[@]}"; do
        local base_name="${file#.}"  # ".zshrc" -> "zshrc"
        backup_file "${HOME}/${file}" "${ZDOTDIR}" "${base_name}"
        ln -sf "${ZDOTDIR}/${base_name}" "${ZDOTDIR}/${file}"
    done
}

# Backup Vim configuration
setup_vim_config() {
    info "Setting up Vim configuration..."
    mkdir -p "${XDG_CONFIG_HOME}/vim"
    backup_file "${HOME}/.vimrc" "${XDG_CONFIG_HOME}/vim" "vimrc"

    # Remove old Vim directories if they exist
    [ -e "${HOME}/.vim" ] && rm -rf "${HOME}/.vim"
    [ -e "${HOME}/.viminfo" ] && rm -f "${HOME}/.viminfo"

    # Prepare viminfo in XDG directory
    mkdir -p "${XDG_DATA_HOME}/vim"
    touch "${XDG_DATA_HOME}/vim/viminfo"
}

# Backup Tmux configuration
setup_tmux_config() {
    info "Setting up Tmux configuration..."
    mkdir -p "${XDG_CONFIG_HOME}/tmux"
    backup_file "${HOME}/.tmux.conf" "${XDG_CONFIG_HOME}/tmux" "tmux.conf"
}

# Backup Git configuration
setup_git_config() {
    info "Setting up Git configuration..."
    mkdir -p "${XDG_CONFIG_HOME}/git"
    backup_file "${HOME}/.gitconfig" "${XDG_CONFIG_HOME}/git" "config"
}

########################################
# Main Function
########################################
main() {
    init_colors

    # Check for necessary commands
    need_cmd ln
    need_cmd mkdir

    printf "\n"
    setup_zsh_config
    setup_vim_config
    setup_tmux_config
    setup_git_config

    printf "%b%bComplete the initial setting!%b\n" "${underline}" "${bold}" "${no_format}"
    printf "Please relogin your shell to apply changes.\n\n"
}

########################################
# Execute
########################################
main "$@" || exit 1
