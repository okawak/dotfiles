#
#  ~/.zshrc
#

typeset -U PATH

HISTFILE="$XDG_STATE_HOME"/zsh/history
# Completion files: Use XDG dirs
#[ -d "$XDG_CACHE_HOME"/zsh ] || mkdir -p "$XDG_CACHE_HOME"/zsh
#zstyle ':completion:*' cache-path "$XDG_CACHE_HOME"/zsh/zcompcache
#autoload -U compinit
#compinit -d "$XDG_CACHE_HOME"/zsh/zcompdump-$ZSH_VERSION

setopt hist_ignore_dups
setopt hist_ignore_all_dups

# emacs key-bind
bindkey -e

WORDCHARS=${WORDCHARS//[\/]/}

# path to homebrew for macos
if [[ "$OSTYPE" == darwin* ]]; then
    if [[ -x "/opt/homebrew/bin/brew" ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
fi

# XDG bin path
path=(
    ${XDG_BIN_HOME}
    $path
)

# mise setting
if command -v mise >/dev/null 2>&1; then
    eval "$(mise activate zsh)"
fi

# zim setting
zstyle ':zim:git' aliases-prefix 'G'
zstyle ':zim:input' double-dot-expand yes
ZSH_AUTOSUGGEST_MANUAL_REBIND=1
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

ZIM_HOME="${ZDOTDIR:-${HOME}}"/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e "${ZIM_HOME}"/zimfw.zsh ]]; then
    if command -v curl >/dev/null; then
        curl -fsSL --create-dirs -o "${ZIM_HOME}"/zimfw.zsh \
            https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
    else
        mkdir -p "${ZIM_HOME}" && wget -nv -O "${ZIM_HOME}"/zimfw.zsh \
            https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
    fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! "${ZIM_HOME}"/init.zsh -nt "${ZDOTDIR:-${HOME}}"/.zimrc ]]; then
    source "${ZIM_HOME}"/zimfw.zsh init -q
fi
# Initialize modules.
source "${ZIM_HOME}"/init.zsh

zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key

# git setting
export GPG_TTY=${TTY}

# command aliases
alias cp="cp -i"
alias mv="mv -i"

# neovim setting
if command -v nvim >/dev/null 2>&1; then
    alias vi="nvim"
    alias nim="nvim"
fi

# fzf setting
if command -v fzf >/dev/null 2>&1; then
    source <(fzf --zsh)
fi

# starship setting
if command -v starship >/dev/null 2>&1; then
    eval "$(starship init zsh)"
fi

# rust setting
if [ -f "${XDG_DATA_HOME}"/cargo/env ]; then
    source "${XDG_DATA_HOME}"/cargo/env
fi

# npm tools installed globally
if command -v mise >/dev/null 2>&1; then
    path=(
        ${XDG_DATA_HOME}/npm/bin(N-/)
        $path
    )
fi

# bun tools installed globally
path=(
    ${HOME}/.cache/.bun/bin
    $path
)

# Load Angular CLI autocompletion.
if command -v ng >/dev/null 2>&1; then
    if ! command -v node >/dev/null 2>&1; then
        # need to specify the node path
        path=(
            ${XDG_DATA_HOME}/mise/installs/node/latest/bin(N-/)
            $path
        )
    fi
    source <(ng completion script)
fi

# artemis
if [ -d ${HOME}/art_analysis ]; then
    # ROOT
    source ${HOME}/Cern/ROOT/root_current/bin/thisroot.sh >/dev/null 2>&1

    # SRIMLIB
    source ${HOME}/repos/SRIMlib/thisSRIMlib.sh >/dev/null 2>&1
    # TSrim
    source ${HOME}/repos/tsrim/install/bin/thisTSrim.sh >/dev/null 2>&1

    # artemis
    source ${HOME}/repos/artemis/install/bin/thisartemis.sh >/dev/null 2>&1
    export EXP_NAME="si26a"
    export EXP_NAME_OLD="develop"
    path=(
        ${HOME}/art_analysis/bin(N-/)
        $path
    )
    source ${HOME}/art_analysis/bin/art_setting -q
fi

# ghq search and move to it
ghq-fzf() {
  local src=$(ghq list --full-path --exact | fzf --preview "ls -laTp {} | tail -n+4 | awk '{print \$9\"/\"\$6\"/\"\$7 \" \" \$10}'")
  if [ -n "$src" ]; then
    BUFFER="cd $src"
    zle accept-line
  fi
  zle -R -c
}
zle -N ghq-fzf
bindkey '^]' ghq-fzf


unset NO_COLOR

